// Code generated by MockGen. DO NOT EDIT.
// Source: items.go

// Package handlers is a generated GoMock package.
package handlers

import (
	transaction "autumn-2021-intern-assignment/pkg/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemsRepositoryInterface is a mock of ItemsRepositoryInterface interface.
type MockItemsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockItemsRepositoryInterfaceMockRecorder
}

// MockItemsRepositoryInterfaceMockRecorder is the mock recorder for MockItemsRepositoryInterface.
type MockItemsRepositoryInterfaceMockRecorder struct {
	mock *MockItemsRepositoryInterface
}

// NewMockItemsRepositoryInterface creates a new mock instance.
func NewMockItemsRepositoryInterface(ctrl *gomock.Controller) *MockItemsRepositoryInterface {
	mock := &MockItemsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockItemsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsRepositoryInterface) EXPECT() *MockItemsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddMoney mocks base method.
func (m *MockItemsRepositoryInterface) AddMoney(userID int, money float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMoney", userID, money)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMoney indicates an expected call of AddMoney.
func (mr *MockItemsRepositoryInterfaceMockRecorder) AddMoney(userID, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoney", reflect.TypeOf((*MockItemsRepositoryInterface)(nil).AddMoney), userID, money)
}

// GetTransaction mocks base method.
func (m *MockItemsRepositoryInterface) GetTransaction(userID int, orderBy string) ([]*transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", userID, orderBy)
	ret0, _ := ret[0].([]*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockItemsRepositoryInterfaceMockRecorder) GetTransaction(userID, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockItemsRepositoryInterface)(nil).GetTransaction), userID, orderBy)
}

// GetUsersBalance mocks base method.
func (m *MockItemsRepositoryInterface) GetUsersBalance(userID int, currency string) (*transaction.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersBalance", userID, currency)
	ret0, _ := ret[0].(*transaction.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersBalance indicates an expected call of GetUsersBalance.
func (mr *MockItemsRepositoryInterfaceMockRecorder) GetUsersBalance(userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersBalance", reflect.TypeOf((*MockItemsRepositoryInterface)(nil).GetUsersBalance), userID, currency)
}

// TransferMoney mocks base method.
func (m *MockItemsRepositoryInterface) TransferMoney(fromUserID, toUserID int, money float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", fromUserID, toUserID, money)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMoney indicates an expected call of TransferMoney.
func (mr *MockItemsRepositoryInterfaceMockRecorder) TransferMoney(fromUserID, toUserID, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockItemsRepositoryInterface)(nil).TransferMoney), fromUserID, toUserID, money)
}

// WithdrawMoney mocks base method.
func (m *MockItemsRepositoryInterface) WithdrawMoney(userID int, money float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawMoney", userID, money)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawMoney indicates an expected call of WithdrawMoney.
func (mr *MockItemsRepositoryInterfaceMockRecorder) WithdrawMoney(userID, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawMoney", reflect.TypeOf((*MockItemsRepositoryInterface)(nil).WithdrawMoney), userID, money)
}
